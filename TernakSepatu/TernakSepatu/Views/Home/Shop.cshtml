@using Microsoft.AspNetCore.Identity
@using TernakSepatu.Areas.Identity.Data
@{
    ViewData["Title"] = "Home Page";
}

@{
    Layout = "~/Views/Shared/Costumer/_Layout.cshtml";
}

@{
    var context = ViewData.Model as TernakSepatu.Data.TernakSepatuDBContext;
}




@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

    <style>
    .img-height {
        height: 400px; /* Atur tinggi tetap untuk semua gambar */
        object-fit: cover; /* Pastikan gambar memenuhi seluruh area gambar dengan mempertahankan aspek rasio */
    }
    </style>

@section Navbar {
    @Html.Partial("~/Views/Shared/Costumer/Partial/_Navbar2.cshtml")
}

<!-- Page Header Start -->
<div class="container-fluid">
    <div id="randomBackground" class="row px-xl-5" style="background-image: url(''); background-size: contain;">
        <div class="d-flex flex-column align-items-center justify-content-center" style="min-height: 300px">
            <div class="d-inline-flex">
                @if (!string.IsNullOrEmpty(ViewData["BrandName"]?.ToString()))
                {
                    <h5>@ViewData["BrandName"]</h5>
                }
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Daftar gambar yang akan digunakan
        var images = ['/Images/Pelengkap/adidas.jpg', '/Images/Pelengkap/nike.jpg'];

        var container = document.getElementById('randomBackground');

        // Ambil nama brand dari ViewData jika ada
        var brandName = "@ViewData["BrandName"]";

        // Cari gambar yang sesuai dengan nama brand
        var imageName;
        switch (brandName) {
            case "Adidas":
                imageName = '/Images/Pelengkap/adidas.jpg';
                break;
            case "Nike":
                imageName = '/Images/Pelengkap/nike.jpg';
                break;
            case "New Balance":
                imageName = '/Images/Pelengkap/newbalance.jpg';
                break;
            case "Onitsuka":
                imageName = '/Images/Pelengkap/onitsuka.jpg';
                break;
            case "Converse":
                imageName = '/Images/Pelengkap/converse.jpg';
                break;
            case "Vans":
                imageName = '/Images/Pelengkap/vans.png';
                break;

            default:
                // Jika tidak ada brand name dari ViewData, pilih gambar secara acak
                imageName = images[Math.floor(Math.random() * images.length)];
                break;
        }

        // Set background image URL
        container.style.backgroundImage = 'url(' + imageName + ')';
    });
</script>



<!-- Page Header End -->

            <!-- Shop Start -->
            <div class="container-fluid pt-5">
                <div class="row px-xl-5">
                    <!-- Shop Sidebar Start -->
                    <div class="col-lg-3 col-md-12">
                        <!-- Color Start -->
            <div class="border-bottom mb-4 pb-4">
                <h5 class="font-weight-semi-bold mb-4">Filter by Color</h5>
                <form id="colorFilterForm">
                    <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                        <input type="checkbox" class="custom-control-input color-checkbox" name="color" value="all" id="color-all" checked>
                        <label class="custom-control-label" for="color-all">All Color</label>
                        <span class="badge border font-weight-normal">1000</span>
                    </div>
                    @foreach (var color in ViewBag.Colors)
                    {
                        <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                            <input type="checkbox" class="custom-control-input color-checkbox" name="color" value="@color" id="color-@color">
                            <label class="custom-control-label" for="color-@color">@color</label>
                            <span class="badge border font-weight-normal">1000</span>
                        </div>
                    }
                </form>
            </div>

                        <!-- Color End -->
                        <!-- Size Start -->
            <div class="mb-5">
                <h5 class="font-weight-semi-bold mb-4">Filter by size</h5>
                <form>
                    <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                        <input type="checkbox" class="custom-control-input size-checkbox" checked id="size-all">
                        <label class="custom-control-label" for="size-all">All Size</label>
                        <span class="badge border font-weight-normal">1000</span>
                    </div>
                    @foreach (var size in ViewBag.Size)
                    {
                        <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                            <input type="checkbox" class="custom-control-input size-checkbox" name="size" value="@size" id="size-@size">
                            <label class="custom-control-label" for="size-@size">@size</label>
                            <span class="badge border font-weight-normal">1000</span>
                        </div>
                    }
                </form>
            </div>


                        <!-- Size End -->
                    </div>
                    <!-- Shop Sidebar End -->
                    <!-- Shop Product Start -->
                    <div class="col-lg-9 col-md-12">
                        <div class="row pb-3">
                            <div class="col-12 pb-1">
                    @if (!string.IsNullOrEmpty(ViewData["CategoryName"]?.ToString()))
                    {
                        <h5>Category: @ViewData["CategoryName"]</h5>
                    }
                    else if (!string.IsNullOrEmpty(ViewData["BrandName"]?.ToString()))
                    {
                        <h5>Brand: @ViewData["BrandName"]</h5>
                    }
                            </div>


                @if (ViewData["Products"] == null || !(ViewData["Products"] is List<Product> products) || products.Count == 0)
                {
                    <p>Produk Sedang Kosong, Maaf</p>
                }
                else
                {
                    <!-- Tampilkan produk yang masih tersedia -->
                    @foreach (var product in products.Where(p => p.Stock != "Habis"))
                    {
                        <div class="col-lg-4 col-md-6 col-sm-12 pb-1">
                            <div class="card product-item border-0 mb-4" data-product-color="@product.Colors" data-product-size="@product.Size" data-product-conditon="@product.Condition">
                                <div class="card-header product-img position-relative overflow-hidden bg-transparent border p-0">
                                    <img class="img-fluid w-100 img-height" src="~/Images/Product/@(product.ImageURL.Split(',')[0])" alt="">
                                </div>
                                <div class="card-body border-left border-right text-center p-0 pt-4 pb-3">
                                    <h6 class="text-truncate mb-3">@product.ProductName <span class="text-white bg-dark">@product.Condition</span></h6>
                                    <div class="d-flex justify-content-center">
                                        <h6>@string.Format("{0:C}", product.Price)</h6>
                                        @if (product.Discount > 0)
                                        {
                                            <h6 class="text-muted ml-2"><del>@string.Format("{0:C}", product.Discount)</del></h6>
                                        }
                                    </div>
                                </div>
                                <div class="card-footer d-flex justify-content-between bg-light border">
                                    <a href="@Url.Action("Detail", "Home", new { id = product.Id })" class="btn btn-sm text-dark p-0"><i class="fas fa-eye text-dark mr-1"></i>View Detail</a>
                                    <a href="#" class="btn btn-sm text-dark p-0 btn-add-to-wishlist" data-product-id="@product.Id">
                                        <i class="fas fa-heart text-dark mr-1"></i>
                                    </a>
                                    <a href="#" class="btn btn-sm text-dark p-0 btn-add-to-cart" data-product-id="@product.Id">
                                        <i class="fas fa-shopping-cart text-dark mr-1"></i>Add To Cart
                                    </a>
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Tampilkan produk yang sudah habis stoknya di bagian paling belakang -->
                    @foreach (var product in products.Where(p => p.Stock == "Habis"))
                    {
                        <div class="col-lg-4 col-md-6 col-sm-12 pb-1">
                            <div class="card product-item border-0 mb-4" data-product-color="@product.Colors" data-product-size="@product.Size" data-product-conditon="@product.Condition">
                                <div class="card-header product-img position-relative overflow-hidden bg-transparent border p-0">
                                    <img class="img-fluid w-100 img-height" src="~/Images/Product/@(product.ImageURL.Split(',')[0])" alt="">
                                </div>
                                <div class="card-body border-left border-right text-center p-0 pt-4 pb-3">
                                    <h6 class="text-truncate mb-3">@product.ProductName <span class="text-white bg-dark">@product.Condition</span></h6>
                                    <div class="d-flex justify-content-center">
                                        <h6>@string.Format("{0:C}", product.Price)</h6>
                                        @if (product.Discount > 0)
                                        {
                                            <h6 class="text-muted ml-2"><del>@string.Format("{0:C}", product.Discount)</del></h6>
                                        }
                                    </div>
                                </div>
                                <div class="card-footer d-flex justify-content-between bg-light border">
                                    <div class="text-center w-100">
                                        <p class="mb-0 bg-danger text-white">Sold Out Kilat!</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }





                           @* <div class="col-12 pb-1">
                                <nav aria-label="Page navigation">
                                    <ul class="pagination justify-content-center mb-3">
                                        <li class="page-item disabled">
                                            <a class="page-link" href="#" aria-label="Previous">
                                                <span aria-hidden="true">&laquo;</span>
                                                <span class="sr-only">Previous</span>
                                            </a>
                                        </li>
                                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                                        <li class="page-item">
                                            <a class="page-link" href="#" aria-label="Next">
                                                <span aria-hidden="true">&raquo;</span>
                                                <span class="sr-only">Next</span>
                                            </a>
                                        </li>
                                    </ul>
                                </nav>
                            </div> *@

                        </div>
                    </div>
                    <!-- Shop Product End -->
                </div>
            </div>
            <!-- Shop End -->





<!-- Link to SweetAlert Library JS (you need to include this in your project) -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- JavaScript Code to Handle Click Event and Display Notification -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const addToCartButtons = document.querySelectorAll('.btn-add-to-cart');

        addToCartButtons.forEach(button => {
            button.addEventListener('click', function (event) {
                event.preventDefault();

                const productId = this.getAttribute('data-product-id');

                // Simulate adding the product to the cart with an AJAX request
                // Replace this with your actual logic to add the product to the cart
                // For demonstration, we'll just show a success notification
                Swal.fire({
                    icon: 'success',
                    title: 'Dimasukkan Ke Keranjang Anda',
                    text: 'The product has been successfully added to your cart.',
                    showConfirmButton: false,
                    timer: 1500
                });
            });
        });
    });
</script>

<!-- JavaScript Code to Handle Click Event and Display Notification -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const addToWishlistButtons = document.querySelectorAll('.btn-add-to-wishlist');

        addToWishlistButtons.forEach(button => {
            button.addEventListener('click', function (event) {
                event.preventDefault();

                const productId = this.getAttribute('data-product-id');

                // Simulate adding the product to the wishlist with an AJAX request
                // Replace this with your actual logic to add the product to the wishlist
                // For demonstration, we'll just show a success notification
                Swal.fire({
                    icon: 'success',
                    title: 'Dimasukkan Ke Daftar Wishlist Anda',
                    text: 'The product has been successfully added to your wishlist.',
                    showConfirmButton: false,
                    timer: 1500
                });
            });
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const colorCheckboxes = document.querySelectorAll('.color-checkbox');
        const allColorCheckbox = document.getElementById('color-all');

        allColorCheckbox.addEventListener('change', function () {
            if (this.checked) {
                // Jika checkbox "All Color" dicentang, tampilkan semua produk
                const products = document.querySelectorAll('.product-item');
                products.forEach(product => {
                    product.style.display = 'block';
                });

                // Reset semua checkbox warna menjadi tidak dicentang
                colorCheckboxes.forEach(checkbox => {
                    checkbox.checked = false;
                });
            }
        });

        colorCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                // Buat array untuk menyimpan nilai warna yang dipilih
                const selectedColors = [];

                // Loop melalui semua checkbox warna
                colorCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        selectedColors.push(checkbox.value); // Tambahkan nilai warna yang dipilih ke dalam array
                    }
                });

                // Lakukan filter pada produk sesuai dengan warna yang dipilih
                const products = document.querySelectorAll('.product-item');

                products.forEach(product => {
                    const productColor = product.getAttribute('data-product-color');

                    // Tampilkan atau sembunyikan produk berdasarkan warna yang dipilih
                    if (selectedColors.includes(productColor) || selectedColors.length === 0) {
                        product.style.display = 'block';
                    } else {
                        product.style.display = 'none';
                    }
                });
            });
        });
    });

</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const colorCheckboxes = document.querySelectorAll('.color-checkbox');
        const allColorCheckbox = document.getElementById('color-all');

        allColorCheckbox.addEventListener('change', function () {
            if (this.checked) {
                // Jika checkbox "All Color" dicentang, tampilkan semua produk
                const products = document.querySelectorAll('.product-item');
                products.forEach(product => {
                    product.style.display = 'block';
                });

                // Reset semua checkbox warna menjadi tidak dicentang
                colorCheckboxes.forEach(checkbox => {
                    checkbox.checked = false;
                });
            }
        });

        colorCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                // Buat array untuk menyimpan nilai warna yang dipilih
                const selectedColors = [];

                // Loop melalui semua checkbox warna
                colorCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        selectedColors.push(checkbox.value); // Tambahkan nilai warna yang dipilih ke dalam array
                    }
                });

                // Lakukan filter pada produk sesuai dengan warna yang dipilih
                const products = document.querySelectorAll('.product-item');

                products.forEach(product => {
                    const productColor = product.getAttribute('data-product-color');

                    // Tampilkan atau sembunyikan produk berdasarkan warna yang dipilih
                    if (selectedColors.includes(productColor) || selectedColors.length === 0) {
                        product.style.display = 'block';
                    } else {
                        product.style.display = 'none';
                    }
                });
            });
        });
    });

</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const sizeCheckboxes = document.querySelectorAll('.size-checkbox');
        const allSizeCheckbox = document.getElementById('size-all');

        allSizeCheckbox.addEventListener('change', function () {
            if (this.checked) {
                // Jika checkbox "All Size" dicentang, tampilkan semua produk
                const products = document.querySelectorAll('.product-item');
                products.forEach((product, index) => {
                    product.style.display = 'block';
                    product.style.order = index; // Atur urutan sesuai dengan indeks asli
                });

                // Reset semua checkbox ukuran menjadi tidak dicentang
                sizeCheckboxes.forEach(checkbox => {
                    checkbox.checked = false;
                });
            }
        });

        sizeCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                console.log('Checkbox size changed.'); // Log pesan untuk memeriksa apakah event listener ini terpanggil

                // Buat array untuk menyimpan nilai ukuran yang dipilih
                const selectedSizes = [];

                // Loop melalui semua checkbox ukuran
                sizeCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        selectedSizes.push(checkbox.value); // Tambahkan nilai ukuran yang dipilih ke dalam array
                    }
                });

                console.log('Selected sizes:', selectedSizes); // Log nilai ukuran yang dipilih untuk memeriksa apakah logika filter berfungsi dengan benar

                // Lakukan filter pada produk sesuai dengan ukuran yang dipilih
                const products = document.querySelectorAll('.product-item');

                products.forEach((product, index) => {
                    const productSizes = product.getAttribute('data-product-size').split(','); // Ambil ukuran-ukuran produk dari atribut data

                    // Tampilkan atau sembunyikan produk berdasarkan ukuran yang dipilih
                    if (selectedSizes.some(size => productSizes.includes(size)) || selectedSizes.length === 0) {
                        product.style.display = 'block';
                    } else {
                        product.style.display = 'none';
                    }
                });
            });
        });
    });

</script>
